<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">

	
	<!-- 전체 게시글 갯수 조회 -->
	<select id="getBoardTotalCount" resultType="int">
		SELECT COUNT(*) FROM BBS_T
	</select>
	
	<!-- 페이지에 표시할 게시글 조회 
		parameterType="Map" : begin, end 값 전달 용도
		key-value 형태의 Map 사용 바인드변수명이 key가 됨-->
	<select id="getBoardlist" resultType="com.board.vo.BoardVO"
			parameterType="Map">

		SELECT *
		FROM (SELECT ROWNUM AS R_NUM, A.*
  				FROM (SELECT *
        			  FROM BBS_T
        			  ORDER BY B_IDX DESC ) A
<![CDATA[
    			WHERE ROWNUM <=#{end} ) B
		WHERE B.R_NUM >= #{begin}
]]>
	</select>
	
	<select id="getOneList" parameterType="String"
			resultType="com.board.vo.BoardVO">
		SELECT B_IDX, SUBJECT, WRITER, CONTENT, 
		       FILE_NAME, ORI_NAME, PWD, WRITE_DATE, IP, HIT
		FROM BBS_T
		WHERE B_IDX = #{b_idx}
	</select>
	
	<!-- 댓글 조회(게시글에 딸린) -->
	<select id="getCommList" parameterType="String"
			resultType="com.board.vo.CommVO">
		SELECT *
		FROM COMMENT_T
		WHERE B_IDX = #{b_idx}
		ORDER BY C_IDX 
	</select>
	
	<!-- 댓글 조회(step 조회) -->
	<select id="getCommStep" parameterType="String"
			resultType="int">
		SELECT COUNT(STEP)
		FROM COMMENT_T
		WHERE B_IDX = #{b_idx}
	</select>
		
	<!-- 게시글 입력 -->
	<insert id="insert" parameterType="com.board.vo.BoardVO">
		INSERT INTO BBS_T
		       (B_IDX, SUBJECT, WRITER, CONTENT, 
		       FILE_NAME, ORI_NAME, PWD, WRITE_DATE, IP, HIT)
		VALUES (BBS_T_SEQ.NEXTVAL, #{subject}, #{writer}, #{content}, 
				#{file_name}, #{ori_name}, #{pwd}, SYSDATE, #{ip}, 0)
	</insert>
	
	<!-- 댓글 추가 -->
	<insert id="setReInsert" parameterType="com.board.vo.CommVO">
		INSERT INTO COMMENT_T
		       (C_IDX, STEP, LEV, BNAME, WRITER, CONTENT, PWD,
		       WRITE_DATE, IP, B_IDX)
		VALUES (COMMENT_T_SEQ.NEXTVAL, #{step}, #{lev}, 'BBS', #{writer}, #{content}, #{pwd},
		       SYSDATE, #{ip}, #{b_idx})
	</insert>
	
	<!-- 댓긋에 답글 추가 -->
	<insert id="setReAnsWrite" parameterType="com.board.vo.CommVO">
		INSERT INTO COMMENT_T
		       (C_IDX, STEP, LEV, BNAME, WRITER, CONTENT, PWD,
		       WRITE_DATE, IP, B_IDX)
		VALUES (COMMENT_T_SEQ.NEXTVAL, #{step}, #{lev}, 'BBS', #{writer}, #{content}, #{pwd},
		       SYSDATE, #{ip}, #{b_idx})
	</insert>
	
	
	<!-- 게시글 수정 -->
	<update id="update" parameterType="com.board.vo.BoardVO">
		UPDATE BBS_T
		   SET SUBJECT = #{subject},
		   	   WRITER = #{writer},
		   	   CONTENT = #{content},
		   	   FILE_NAME = #{file_name},
		   	   ORI_NAME = #{ori_name},
		   	   WRITE_DATE = SYSDATE
		 WHERE B_IDX = #{b_idx}
	</update>
	
	<delete id="re_delete" parameterType="com.board.vo.CommVO">
		DELETE FROM COMMENT_T 
		WHERE B_IDX = #{b_idx} 
		  AND STEP = #{step}
		  AND LEV = #{lev} 
	</delete>
	
	<!-- 댓글 삽입전 lev 업데이터 처리 원글과 같은 그룹이면서(lev) 레벨이 같거나 큰 레벨은 lev 1증가 -->
	<update id="updateLev" parameterType="Map">
		UPDATE COMMENT_T
		SET	LEV = LEV + 1
		WHERE B_IDX = #{b_idx} 
		AND STEP = #{step}
		AND LEV >= #{lev}
	</update>
	
	<!-- 게시글 삭제처리 -->
	<delete id="delete" parameterType="String">
		DELETE FROM BBS_T WHERE B_IDX = #{b_idx}
	</delete>
	
	<!-- 조회수 1 증가 처리 -->
	<update id="updateHit" parameterType="int">
		UPDATE BBS_T SET HIT = HIT + 1 WHERE B_IDX = #{b_idx}
	</update>
	

	<!-- 유저에게 받은 검색어로 게시글 갯수 조회  -->
	<select id="getConSearchCount" resultType="int"
	      parameterType="Map">
	   SELECT COUNT(*) 
	   FROM BBS_T
	   <choose>
	   		<when test="idx == 1"> <!-- 제목+내용 -->
				WHERE SUBJECT LIKE '%'||#{searchData}||'%'
				   OR CONTENT LIKE '%'||#{searchData}||'%'
	   		</when>
	   		<when test="idx == 2"> <!-- 제목만 -->
				WHERE SUBJECT LIKE '%'||#{searchData}||'%'
	   		</when>
	   		<when test="idx == 3"> <!-- 글작성자 -->
				WHERE WRITER LIKE '%'||#{searchData}||'%'
	   		</when>
	   </choose>
	</select>
	
	
	<!-- 게시판 글 검색 조회  -->
	<select id="getConSearch" resultType="com.board.vo.BoardVO"
	      parameterType="Map">
		SELECT *
		FROM (SELECT ROWNUM AS R_NUM, A.*
  				FROM (SELECT *
        			  FROM BBS_T
	   <choose>
	   		<when test="idx == 1"> <!-- 제목+내용 -->
				WHERE SUBJECT LIKE '%'||#{searchData}||'%'
				   OR CONTENT LIKE '%'||#{searchData}||'%'
	   		</when>
	   		<when test="idx == 2"> <!-- 제목만 -->
				WHERE SUBJECT LIKE '%'||#{searchData}||'%'
	   		</when>
	   		<when test="idx == 3"> <!-- 글작성자 -->
				WHERE WRITER LIKE '%'||#{searchData}||'%'
	   		</when>
	   </choose>
        			  ORDER BY B_IDX DESC ) A
<![CDATA[
    			WHERE ROWNUM <=#{end} ) B
		WHERE B.R_NUM >= #{begin}
]]>
	</select>


 	<select id="userID" resultType="com.board.vo.BoardVO"
			parameterType="Map"> 
			SELECT userPassword FROM USER WHERE userID = #{userID}	
	</select>

	<!-- 로그인 확인 -->	
	<select id="loginCheck" parameterType="hashMap" resultType="hashMap">
		SELECT PWD FROM MEMBER2
		WHERE ID = #{id}
	</select>
	
	<!-- 회원가입 -->
	<insert id="join" parameterType="map">
		INSERT INTO MEMBER2
		       (IDX, ID, PWD, NAME, AGE, ADDRESS, REG)
		VALUES (MEMBER2_SEQ.NEXTVAL, #{ID}, #{PWD}, #{name}, 
				#{age}, #{address}, SYSDATE)
	</insert>
	
	<!-- DB에 ID가 등록 되어 있는지 확인한다. -->
	<select id="getDuplicateID" resultType="int" parameterType="String">
		SELECT COUNT(*) FROM MEMBER2 WHERE ID = #{id}
	</select>
 
 
</mapper>









